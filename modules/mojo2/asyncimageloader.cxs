' Module mojo2.asyncimageloader
' 2025 by Mag. No warranty implied; use at your own risk.
'
'If you're loading a file from a server, CORS (Access-Control-Allow-Origin) must be enabled.
'Without the correct CORS headers, the request will fail.
'This isn't specific to CerberusX ï¿½ CORS is a general requirement for accessing images or resources from other servers.

Import mojo2.graphics
Import brl.asyncevent

#If TARGET="android"
	Import "native/asyncimageloader.android.java"
	#If Not ANDROID_PERMISSION_INTERNET_IMPLEMENTED
		#ANDROID_MANIFEST_MAIN+="<uses-permission android:name=~qandroid.permission.INTERNET~q />"
		#ANDROID_MANIFEST_MAIN+="<uses-permission android:name=~qandroid.permission.ACCESS_NETWORK_STATE~q />"
		#ANDROID_PERMISSION_INTERNET_IMPLEMENTED=True
	#Endif
#Elseif TARGET="html5"
	Import "native/asyncimageloader.html5.js"
#Else
	#Error "The AsyncImageLoader module is only available on the android and html5 targets"
#End
Extern Private
Class BBAsyncImageLoader Extends Null="BBAsyncImageLoader"
	Private
	Method DownloadImage:Void(url:String)
	Method isDoneDownload:String()
	Method clearDownload:Void()
End 	

Public

Interface IOnLoadImageComplete
	Method OnLoadImageComplete:Void(image:Image, path:String, source:IAsyncEventSource)
End

Function LoadImageAsync:Void( path:String, xhandle:Float=.5, yhandle:Float=.5, flags:Int=Image.Filter|Image.Mipmap, shader:Shader=Null ,onComplete:IOnLoadImageComplete)
	Local loader:=New AsyncImageLoader( path,xhandle,yhandle,flags,shader,onComplete )
end	


Class AsyncImageLoader Implements IAsyncEventSource
	Field _asyncimageloader:BBAsyncImageLoader
	Field _state:Int
	Field _onOpen:IOnLoadImageComplete
	Field _xhandle:Float
	Field _yhandle:Float
	Field _path:String
	Field _flags:Int
	Field _shader:Shader
	Field _img:Image
	Method New( path:String, xhandle:Float=.5, yhandle:Float=.5, flags:Int=Image.Filter|Image.Mipmap, shader:Shader=Null ,onComplete:IOnLoadImageComplete)
		_asyncimageloader=New BBAsyncImageLoader	
		AddAsyncEventSource Self
		_onOpen = onComplete
		_state = 1
		_asyncimageloader.DownloadImage(path)
		_path = path
		_xhandle=xhandle
		_yhandle=yhandle
		_flags=flags
		_shader=shader
		_img = null
	End
	Method UpdateAsyncEvents:Void()
		If _state=1
			If _asyncimageloader.isDoneDownload()
				_img=Image.Load(_asyncimageloader.isDoneDownload(),_xhandle,_yhandle,_flags,_shader) 
				_asyncimageloader.clearDownload()
				_state = 2
				RemoveAsyncEventSource Self
				_onOpen.OnLoadImageComplete(_img,_path,Self)
			endif
		end
	End
End

